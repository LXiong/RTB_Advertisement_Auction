/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UserInterface.AdvertiserMarketing;

import Business.Advertisement.OrgAd;
import Business.Organization.AdvertiserMarketingOrganization;
import Business.Target.AgeTarget;
import Business.Target.GenderTarget;
import Business.Target.NationalityTarget;
import Business.Target.OccupationTarget;
import Business.Target.PageTypeTarget;
import Business.Target.Target;
import Business.UserAccount.UserAccount;
import Business.Validation.Validation;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Neethan
 */
public class AdsDetailJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private OrgAd orgad;
    private UserAccount userAccount;
    private AdvertiserMarketingOrganization organization;
    /**
     * Creates new form AdsDetailJPanel
     */
    public AdsDetailJPanel(JPanel userProcessContainer, OrgAd ad) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.orgad = ad;
        adName.setText(orgad.getAd().getName());
        populateTable();
        populateComboBox();
        alert.setText("use content 2 to fill min age range");
    }

    private void populateTable(){
        DefaultTableModel dtm = (DefaultTableModel)targetMarketList.getModel();
        dtm.setRowCount(0);
        if(orgad.getAd().getTargetMarketList().getTargetList()==null){
            orgad.getAd().getTargetMarketList().setTargetList(new ArrayList());
        }
        for(Target t : orgad.getAd().getTargetMarketList().getTargetList()){
            Object[] row = new Object[3];
            row[0] = t;
            switch(t.getType()){
                case "age":
                    row[1] = "From " + String.valueOf(((AgeTarget)t).getMinAge()) + " to " + String.valueOf(((AgeTarget)t).getMaxAge());
                    break;
                case "gender":
                    row[1] = ((GenderTarget)t).getGender();
                    break;
                case "nationality":
                    row[1] = ((NationalityTarget)t).getNation();
                    break;
                case "occupation":
                    row[1] = ((OccupationTarget)t).getOccupt();
                    break;
                case "pageType":
                    row[1] = ((PageTypeTarget)t).getPageType();
                    break;
            }
            row[2] = t.getBidding();
            dtm.addRow(row);
        }
    }
    
    private void populateComboBox(){
        targetTypeJComboBox.removeAllItems();
        targetTypeJComboBox.addItem("Age Target");
        targetTypeJComboBox.addItem("Gender Target");
        targetTypeJComboBox.addItem("Nationality Target");
        targetTypeJComboBox.addItem("Occupation Target");
        targetTypeJComboBox.addItem("Page Type Target");
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        adName = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        targetMarketList = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        targetTypeJComboBox = new javax.swing.JComboBox();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        content1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        content2 = new javax.swing.JTextField();
        alert = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        biddingJTextField = new javax.swing.JTextField();

        setMinimumSize(new java.awt.Dimension(570, 440));
        setPreferredSize(new java.awt.Dimension(570, 440));

        jLabel1.setText("Advertisement:");

        targetMarketList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Target Type", "Target Content", "Target Bidding"
            }
        ));
        jScrollPane1.setViewportView(targetMarketList);

        jButton1.setText("Delete Target");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Add Target Market");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        targetTypeJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        targetTypeJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetTypeJComboBoxActionPerformed(evt);
            }
        });

        jButton3.setText("<< Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText("Target Market Type");

        jLabel3.setText("Target Content 1");

        jLabel4.setText("Target Content 2");

        content2.setEnabled(false);

        alert.setForeground(new java.awt.Color(255, 0, 0));

        jLabel5.setText("Bidding");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(18, 18, 18)
                                    .addComponent(adName))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(109, 109, 109)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel5))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(targetTypeJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(content1)
                                    .addComponent(content2)
                                    .addComponent(biddingJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(192, 192, 192)
                        .addComponent(alert)))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(adName))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(targetTypeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(content1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(content2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(biddingJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(alert)
                .addContainerGap(56, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = targetMarketList.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row from the list first.");
            return;
        }
        int selectedValue = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the target?", "Warning",JOptionPane.YES_NO_OPTION);
        if(selectedValue == JOptionPane.YES_OPTION){
            Target t = (Target) targetMarketList.getValueAt(selectedRow, 0);
            orgad.getAd().getTargetMarketList().removeTarget(t);
            populateTable();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void targetTypeJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetTypeJComboBoxActionPerformed
        // TODO add your handling code here:
        String s = (String)targetTypeJComboBox.getSelectedItem();
        if(s!=null && s.equals("Age Target")){
            content2.setEnabled(true);
            alert.setText("use content 2 to fill min age range");
        }
        else {
            content2.setEnabled(false);
            alert.setText("");
        }
    }//GEN-LAST:event_targetTypeJComboBoxActionPerformed

    private boolean targetExist(Target t){
        for(Target testt : orgad.getAd().getTargetMarketList().getTargetList()){
            if(t.getType().equals(testt.getType())){
                switch(t.getType()){
                    case "age" :
                        if(((AgeTarget)t).getMaxAge()==((AgeTarget)testt).getMaxAge() && ((AgeTarget)t).getMinAge()==((AgeTarget)t).getMinAge())
                            return true;
                        break;
                    case "gender":
                        if(((GenderTarget)t).getGender().equals(((GenderTarget)testt).getGender()))
                            return true;
                        break;
                    case "nationality":
                        if(((NationalityTarget)t).getNation().equals(((NationalityTarget)testt).getNation()))
                            return true;
                        break;
                    case "occupation":
                        if(((OccupationTarget)t).getOccupt().equals(((OccupationTarget)testt).getOccupt()))
                            return true;
                        break;
                    case "pageType":
                        if(((PageTypeTarget)t).getPageType().equals(((PageTypeTarget)testt).getPageType()))
                            return true;
                        break;
                }
            }
        }
        return false;
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String type = (String) targetTypeJComboBox.getSelectedItem();
        float bid = Float.parseFloat(biddingJTextField.getText());
        switch(type){
            case "Age Target":
                if(Validation.stringIsEmpty(content1.getText())||Validation.stringIsEmpty(content2.getText())||Validation.stringIsEmpty(biddingJTextField.getText())){
                    JOptionPane.showMessageDialog(null, "Please fill all the field.");
                    return;
                }
                if(!Validation.isAge(content1.getText())||!Validation.isAge(content2.getText())){
                    JOptionPane.showMessageDialog(null, "Content 1 and Content 2 fields must fill in with validate Age.");
                    content1.setText("");
                    content2.setText("");
                    return;
                }
                if(!Validation.isFinBalance(biddingJTextField.getText())){
                    JOptionPane.showMessageDialog(null, "The Bidding field should be filled with a float number.");
                    biddingJTextField.setText("");
                    return;
                }
                AgeTarget at = new AgeTarget();
                at.setMinAge(Integer.parseInt(content1.getText()));
                at.setMaxAge(Integer.parseInt(content2.getText()));
                at.setBidding(bid);
                if(!targetExist(at))
                    orgad.getAd().getTargetMarketList().addTarget(at);
                else {
                      JOptionPane.showMessageDialog(null, "The target you create has already existed, check again please.");
                      return;
                     }
                break;
            case "Gender Target":
                GenderTarget gt = new GenderTarget();
                gt.setGender(String.valueOf(content1.getText()));
                gt.setBidding(bid);
                if(!targetExist(gt))
                    orgad.getAd().getTargetMarketList().addTarget(gt);
                else{
                    JOptionPane.showMessageDialog(null, "The targetyou create has already existed, check again please.");
                      return;
                }
                break;
            case "Nationality Target":
                NationalityTarget nt = new NationalityTarget();
                nt.setNation(String.valueOf(content1.getText()));
                nt.setBidding(bid);
                if(!targetExist(nt))
                    orgad.getAd().getTargetMarketList().addTarget(nt);
                else{
                    JOptionPane.showMessageDialog(null, "The targetyou create has already existed, check again please.");
                    return;
                }
                break;
            case "Occupation Target":
                OccupationTarget ot = new OccupationTarget();
                ot.setOccupt(String.valueOf(content1.getText()));
                ot.setBidding(bid);
                if(!targetExist(ot))
                    orgad.getAd().getTargetMarketList().addTarget(ot);
                else{
                    JOptionPane.showMessageDialog(null, "The targetyou create has already existed, check again please.");
                    return;
                }
                break;
            case "Page Type Target":
                PageTypeTarget ptt = new PageTypeTarget();
                ptt.setPageType(String.valueOf(content1.getText()));
                ptt.setBidding(bid);
                if(!targetExist(ptt))
                    orgad.getAd().getTargetMarketList().addTarget(ptt);
                else{
                    JOptionPane.showMessageDialog(null, "The targetyou create has already existed, check again please.");
                    return;
                }
                break;
        }
        populateTable();
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel adName;
    private javax.swing.JLabel alert;
    private javax.swing.JTextField biddingJTextField;
    private javax.swing.JTextField content1;
    private javax.swing.JTextField content2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable targetMarketList;
    private javax.swing.JComboBox targetTypeJComboBox;
    // End of variables declaration//GEN-END:variables
}
